<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Atomic Counters</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'rate-limiting';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'mutexes';
          }
          
      }
  </script>
  <body>
    <div class="example" id="atomic-counters">
      <h2><a href="./">Go by Example</a>: Atomic Counters</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Mekanisme utama untuk mengatur <em>state</em> di Go adalah
komunikasi melalui channel. Kita telah melihatnya di contoh
<a href="worker-pools">worker pools</a>. Namun ada beberapa pilihan
lain untuk mengatur state. Di contoh ini kita akan melihat
penggunaan package <code>sync/atomic</code> untuk <em>atomic counters</em>
yang diakses oleh beberapa goroutine.</p>

          </td>
          <td class="code leading">
            <a href="http://play.golang.org/p/1oWCoAXngz0"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&quot;fmt&quot;</span>
    <span class="s">&quot;sync&quot;</span>
    <span class="s">&quot;sync/atomic&quot;</span>
<span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Kita akan menggunakan sebuah unsigned integer
sebagai representasi counter (nilainya selalu positif).</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="kd">var</span> <span class="nx">ops</span> <span class="kt">uint64</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Sebuah <em>WaitGroup</em> akan digunakan untuk menunggu
semua goroutine selesai.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Kita akan menjalankan 50 goroutine yang akan
menaikkan counter sampai 1000 kali.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">50</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">wg</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Untuk menaikkan nilai cuonter secara
<em>atomic</em> kita menggunakan <code>AddUint64</code>
dan memberikan alamat memory counter
<code>ops</code> dengan sintaks <code>&amp;</code>.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">for</span> <span class="nx">c</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">c</span> <span class="p">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nx">c</span><span class="o">++</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>                <span class="nx">atomic</span><span class="p">.</span><span class="nx">AddUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ops</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
        <span class="p">}()</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Menunggu sampai semua gorouting selesai.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">wg</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Sekarang sudah aman untuk mengakses <code>ops</code> karena
kita tahu tidak ada lagi goroutine yang menulisnya.
Membaca atomic secara aman sewaktu atomic diupdate juga
dimungkinkan menggunakan fungsi seperti <code>atomic.LoadUint64</code>.</p>

          </td>
          <td class="code">
            
          <div class="highlight"><pre>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;ops:&quot;</span><span class="p">,</span> <span class="nx">ops</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Kita mengharapkan mendapatkan persis 50.000 operasi.
Jika kita menggunakan non-atomic <code>ops++</code> untuk
menaikkan counter kemungkinan besar kita akan
mendapatkan jumlah lain yang berbeda setiap kali
menjalankan program karena goroutine akan mempengaruhi
satu sama lain. Kita akan mendapatkan data race failure
bila kita menjalankan program dengan flag <code>-race</code>.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="gp">$</span> go run atomic-counters.go
<span class="go">ops: 50000</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Selanjutnya kita akan melihat mutex,
tool lainnya yang untuk mengatur state.</p>

          </td>
          <td class="code empty">
            
          
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Contoh berikutnya: <a href="mutexes">Mutexes</a>.
      </p>
      
      <p class="footer">
        by <a href="https://bumi.dev">satriyop</a> | <a href="https://github.com/satriyop/gobyexample/blob/master/examples/atomic-counters">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
      </p>
    </div>
    <script>
      var codeLines = [];
      codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"fmt\"\u000A    \"sync\"\u000A    \"sync/atomic\"\u000A)\u000A');codeLines.push('func main() {\u000A');codeLines.push('    var ops uint64\u000A');codeLines.push('    var wg sync.WaitGroup\u000A');codeLines.push('    for i :\x3D 0; i \x3C 50; i++ {\u000A        wg.Add(1)\u000A');codeLines.push('        go func() {\u000A            for c :\x3D 0; c \x3C 1000; c++ {\u000A');codeLines.push('                atomic.AddUint64(\x26ops, 1)\u000A            }\u000A            wg.Done()\u000A        }()\u000A    }\u000A');codeLines.push('    wg.Wait()\u000A');codeLines.push('    fmt.Println(\"ops:\", ops)\u000A}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
